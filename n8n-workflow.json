{
  "name": "Cloudedze Excel Analysis & Cost Comparison",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "eb07e595-0bd4-4e3d-a7d8-dabd2ce3451a",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "eb07e595-0bd4-4e3d-a7d8-dabd2ce3451a"
    },
    {
      "parameters": {
        "jsCode": "// Extract data from webhook query parameters\nconst queryParams = $input.all()[0].json.query;\n\n// Parse the incoming data from Cloudedze\nconst analysisData = {\n  analysisId: queryParams.analysisId || 'unknown',\n  analysisName: queryParams.analysisName || 'Excel Analysis',\n  userId: queryParams.userId || 'unknown',\n  timestamp: queryParams.timestamp || new Date().toISOString(),\n  totalResources: parseInt(queryParams.totalResources) || 0,\n  totalCost: parseFloat(queryParams.totalCost) || 0,\n  providers: queryParams.providers ? queryParams.providers.split(',') : [],\n  types: queryParams.types ? queryParams.types.split(',') : [],\n  source: 'cloudedze-excel-upload'\n};\n\n// Create structured data for AI analysis\nconst structuredData = {\n  metadata: {\n    source: 'Cloudedze Excel Upload',\n    analysisId: analysisData.analysisId,\n    timestamp: analysisData.timestamp,\n    userId: analysisData.userId\n  },\n  summary: {\n    totalResources: analysisData.totalResources,\n    totalCost: analysisData.totalCost,\n    providers: analysisData.providers,\n    resourceTypes: analysisData.types\n  },\n  inventory: {\n    // This would contain the actual Excel data from Cloudedze\n    // For now, we'll use the summary data\n    resources: [],\n    analysis: analysisData\n  }\n};\n\nreturn [{ json: structuredData }];"
      },
      "id": "parse-webhook-data",
      "name": "Parse Webhook Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "model": "gpt-4",
        "options": {
          "temperature": 0.3,
          "maxTokens": 2000
        },
        "messages": {
          "values": [
            {
              "content": "You are a cloud infrastructure expert. Analyze the following Excel inventory data and provide a comprehensive analysis in a format that's easy to understand for ChatGPT and other AI systems.\n\n**Data to Analyze:**\n{{ $json }}\n\n**Please provide:**\n1. **Resource Summary**: What types of resources are in this inventory?\n2. **Cost Analysis**: Break down the cost structure and identify cost drivers\n3. **Optimization Recommendations**: Suggest ways to reduce costs\n4. **Cloud Provider Comparison**: Compare AWS, Azure, GCP, and Oracle Cloud costs for similar infrastructure\n5. **ChatGPT-Friendly Format**: Structure the output in a clear, markdown format that ChatGPT can easily understand and work with\n\n**Output Format:**\n```markdown\n# Cloud Infrastructure Analysis\n\n## Resource Summary\n[Your analysis here]\n\n## Cost Breakdown\n[Cost analysis here]\n\n## Optimization Recommendations\n[Recommendations here]\n\n## Multi-Cloud Cost Comparison\n[Provider comparison here]\n\n## AI-Friendly Summary\n[Structured summary for ChatGPT]\n```",
              "role": "user"
            }
          ]
        }
      },
      "id": "ai-analysis",
      "name": "AI Infrastructure Analysis",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract AI analysis results\nconst aiAnalysis = $input.all()[0].json.message.content;\nconst originalData = $input.all()[1].json;\n\n// Create comprehensive output for ChatGPT\nconst chatgptOutput = {\n  analysisId: originalData.metadata.analysisId,\n  timestamp: originalData.metadata.timestamp,\n  source: 'Cloudedze + n8n AI Analysis',\n  \n  // Original data from Cloudedze\n  originalInventory: {\n    totalResources: originalData.summary.totalResources,\n    totalCost: originalData.summary.totalCost,\n    providers: originalData.summary.providers,\n    resourceTypes: originalData.summary.resourceTypes\n  },\n  \n  // AI Analysis Results\n  aiAnalysis: aiAnalysis,\n  \n  // Structured data for ChatGPT\n  chatgptFormat: {\n    summary: `Found ${originalData.summary.totalResources} cloud resources with total cost of $${originalData.summary.totalCost}`,\n    providers: originalData.summary.providers.join(', '),\n    resourceTypes: originalData.summary.resourceTypes.join(', '),\n    analysis: aiAnalysis,\n    recommendations: 'See AI analysis above for detailed recommendations',\n    costComparison: 'Multi-cloud cost comparison included in AI analysis'\n  },\n  \n  // Metadata for tracking\n  metadata: {\n    processedAt: new Date().toISOString(),\n    workflow: 'Cloudedze Excel Analysis',\n    version: '1.0'\n  }\n};\n\nreturn [{ json: chatgptOutput }];"
      },
      "id": "format-for-chatgpt",
      "name": "Format for ChatGPT",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "url": "https://api.slack.com/api/chat.postMessage",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "channel",
              "value": "#cloud-analysis"
            },
            {
              "name": "text",
              "value": "üîç *New Cloud Analysis Completed*\n\n*Analysis ID:* {{ $json.analysisId }}\n*Resources:* {{ $json.originalInventory.totalResources }}\n*Total Cost:* ${{ $json.originalInventory.totalCost }}\n*Providers:* {{ $json.originalInventory.providers.join(', ') }}\n\n*AI Analysis Summary:*\n{{ $json.chatgptFormat.summary }}\n\n*View full analysis:* Check your Cloudedze dashboard or n8n workflow results."
            }
          ]
        },
        "options": {}
      },
      "id": "slack-notification",
      "name": "Slack Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 500],
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "create",
        "table": "cloud_analysis_results",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "analysis_id": "={{ $json.analysisId }}",
            "user_id": "={{ $json.originalInventory.userId }}",
            "total_resources": "={{ $json.originalInventory.totalResources }}",
            "total_cost": "={{ $json.originalInventory.totalCost }}",
            "providers": "={{ $json.originalInventory.providers.join(',') }}",
            "ai_analysis": "={{ $json.aiAnalysis }}",
            "created_at": "={{ $json.metadata.processedAt }}"
          }
        },
        "options": {}
      },
      "id": "save-to-database",
      "name": "Save to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [680, 500],
      "continueOnFail": true
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Parse Webhook Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Webhook Data": {
      "main": [
        [
          {
            "node": "AI Infrastructure Analysis",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Infrastructure Analysis": {
      "main": [
        [
          {
            "node": "Format for ChatGPT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format for ChatGPT": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "santoshdarbha.app.n8n.cloud"
  },
  "id": "cloudedze-excel-analysis",
  "tags": [
    {
      "createdAt": "2025-09-19T12:00:00.000Z",
      "updatedAt": "2025-09-19T12:00:00.000Z",
      "id": "cloud-analysis",
      "name": "cloud-analysis"
    }
  ]
}
